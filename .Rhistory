select("SpecCode", "Species", "Brack", "Saltwater")
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems")
# Join the two subsets together
fb.join <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
filter(!is.na("Brack"))
View(fb.sp.subset)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
filter("Brack" != 0 | "Saltwater" != 0)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
filter("Brack" != 0)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
filter("Brack" != "0")
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
mutate(Brack = as.numeric(Brack))
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
mutate(Brack = as.numeric(Brack)) %>%
filter("Brack" != 0)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
mutate(Brack = as.numeric(Brack)) %>%
filter(Brack != 0)
View(fb.sp.subset)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Brack", "Saltwater") %>%
filter(Brack != 0)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack != 0) # only keep species noted as occupying brackish water
View(fb.sp.subset)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter(Estuaries:MarshesSwamps != 0)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), all_vars(.!=0))
View(fb.eco.subset)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0))
View(fb.eco.subset)
# Join the two subsets together
fb.join <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
View(all.eco)
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
View(fb.spawning.table)
unique(fb.spawning.table$SpawningGround)
fb.spawning.subset <- fb.spawning.table %>%
filter(SpawningGround %in% c("coastal", "estuarine"))
View(fb.spawning.subset)
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine"))
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("estuarine")) #coastal and estuarine spawners
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners
View(fb.all)
# Reproduction?
fb.repro.table <- reproduction()
View(fb.repro.table)
# Filter the FishBase dataframe of species that might use mangroves for ones listed in RAM:
ram_mangroves <- fb.all %>%
filter(Species %in% ram.sp)
View(ram_mangroves)
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround == "estuarine")
View(ram_mangroves_nospawning)
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround != "coastal")
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround != "coastal")
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp)
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround != "coastal")
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround != "coastal", na.rm = F)
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround != "coastal" | is.na(SpawningGround))
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround = "estuarine" | is.na(SpawningGround))
# Exclude the coastal spawners, only estuarine spawners -
ram_mangroves_nospawning <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround == "estuarine" | is.na(SpawningGround))
# The column that has the FAO area number is a character and for some reason causing problems with the numbers <10
# so will convert that column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located in the FAO regions that overlap with mangroves
mang.fao.stocks <- numericstock %>%
filter(primary_FAOarea %in% mang.fao.regions) # 368 potential mangrove-associated stocks in RAM?
# Save the mangrove-range FAO region number list
mang.fao.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and for some reason causing problems with the numbers <10
# so will convert that column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located in the FAO regions that overlap with mangroves
mang.fao.stocks <- numericstock %>%
filter(primary_FAOarea %in% mang.fao.regions) # 368 potential mangrove-associated stocks in RAM?
# How many species make up those 368 stocks?
potential.mang.sp <- unique(mang.fao.stocks$scientificname) # 197 potential mangrove-associated species in RAM
View(mang.fao.stocks)
# The column that has the FAO area number is a character and for some reason causing problems with the numbers <10
# so will convert that column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located in the FAO regions that overlap with mangroves
ram_mangrove_stocks <- numericstock %>%
filter(primary_FAOarea %in% fao_mangrove_regions) # 368 potential mangrove-associated stocks in RAM based on geography
# Save the mangrove-range FAO region number list
fao_mangrove_regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# Filter the RAM stocks list for stocks that are located in the FAO regions that overlap with mangroves
ram_mangrove_stocks <- numericstock %>%
filter(primary_FAOarea %in% fao_mangrove_regions) # 368 potential mangrove-associated stocks in RAM based on geography
# But how many of those might use mangroves based on the FishBase information?
ram_fb_potential <- ram_mangroves_nospawning %>%
filter(Species %in% ram_mangrove_stocks$scientificname)
# How many species make up those 30 stocks?
potential.mang.sp2 <- unique(ram_fb_potential$Species)
View(ram_fb_potential)
# But how many of those might use mangroves based on the FishBase information?
ram_fb <- ram_mangrove_stocks %>%
filter(scientificname %in% ram_mangroves_nospawning)
# But how many of those might use mangroves based on the FishBase information?
ram_fb <- ram_mangrove_stocks %>%
filter(scientificname %in% ram_mangroves_nospawning$Species)
# How many species make up those 30 stocks?
potential_mang.sp2 <- unique(ram_fb_$Sscientificname) # 26 different species
# How many species make up those 30 stocks?
potential_mang.sp2 <- unique(ram_fb$Sscientificname) # 26 different species
# But how many of those might use mangroves based on the FishBase information?
ram_fb <- ram_mangrove_stocks %>%
filter(scientificname %in% ram_mangroves_nospawning$Species) #43
# How many species make up those 30 stocks?
potential.mang.sp2 <- unique(ram_fb$scientificname) # 26 different species
# How many species make up those 30 stocks?
potential.mang.sp2 <- unique(ram_fb$scientificname) # 26 different species
potential.mang.sp2.common <- common_names(ram_fb$scientificname)
View(potential.mang.sp2.common)
# The fishbase info for those 26 species:
p2_info <- ram_mangroves_nospawning %>%
filter(Species %in% potential.mang.sp2)
View(p2_info)
View(stock)
View(tl.data)
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
install.packages("freeR")
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
help("freeR")
install.packages("freeR")
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
install.packages("freeR")
install.packages("remotes")
remotes::install_github("cfree14/freeR")
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
# Retrieve species names from the RAM database:
#ram.sp <- stock$scientificname
# Use that list to query FishBase?
#eco <- fishbase(dataset = "ecology", species = ram.sp, cleaned = T)
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve species table for all species
fb.species.table <- species()
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
# Notes about other tables:
# fb.repro.table <- reproduction() - no relevant habitat information
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve species table for all species
fb.species.table <- species()
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
# Notes about other tables:
# fb.repro.table <- reproduction() - no relevant habitat information
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) %>% # only keep brackish water species.... otherwise list is 18k
unique(.)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) %>%  # only keep where one of the relevant columns is -1 (present) - 2013 obs.
unique(.)
#fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species),] # There are some weird duplicates, not sure what's up there but prolly ok
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = spawner) %>%
group_by(SpecCode, Species) %>%
summarize(Coastal_Spawner = sum(coastal, na.rm = T),
Estuarine_Spawner = sum(estuarine, na.rm = T)) # That was a dumb way to do that but whatever
# Not including spawning area because multiple spawning areas results in multiple entries per species which is annoying
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4102 obs
fb.all.duplicates <- fb.all[duplicated(fb.all$Species),] # The duplicates....
fb.all.duplicates
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and
# causing problems with the numbers <10 so will convert that
# column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
ram.mang.sp <- unique(ram.fao.subset$scientificname)
# 197 potential mangrove-associated species in RAM based on geography
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and
# causing problems with the numbers <10 so will convert that
# column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
ram.mang.sp <- unique(ram.fao.subset$scientificname)
# 197 potential mangrove-associated species in RAM based on geography
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and
# causing problems with the numbers <10 so will convert that
# column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
ram.mang.sp <- unique(ram.fao.subset$scientificname)
# 197 potential mangrove-associated species in RAM based on geography
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), any_vars(!is.na(.))) # 3791 possible species miiiiight use mangroves
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# 42 species in the FishBase Subset are in RAM FAO Subset
# This means: these species are listed in FB as either occupying brackish water AND/OR matching one of the estuarine habitat characteristics, have assessments in the RAM database, and are located in FAO Regions that overlap with geographic mangrove extent
# How many stocks for those 42 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.inram$Species),] #70 stocks
# What about ones that just say they use mangroves?
fb.mangroves <- fb.all.subset[which(fb.all.subset$Mangroves == -1),] # 609 species in fishbase subset that have mangroves listed as habitat
fb.mang.inram <- fb.mangroves[which(fb.mangroves$Species %in% ram.fao.subset$scientificname),] # 7 species in RAM use mangroves
# How many stocks make up those 7 species?
fbram.mang.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.mang.inram$Species),] # 9 stocks
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
fbram.mang.stocks
fbram.mang.stocks
ram.sp
stock
install.packages("devtools")
library(devtools)
install_github("ropensci/ramlegacy")
install.packages("devtools")
library(devtools)
install_github("ropensci/ramlegacy")
install.packages("devtools")
install.packages("devtools")
install_github("ropensci/ramlegacy")
library("devtools")
install_github("ropensci/ramlegacy")
library(ramlegacy)
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(tidyverse)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(‘rlang’)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
install.packages("rlang")
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(ramlegacy) # caches RAM to make it easier to reference install_github("ropensci/ramlegacy")
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve species table for all species
fb.species.table <- species()
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
# Notes about other tables:
# fb.repro.table <- reproduction() - no relevant habitat information
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) %>% # only keep brackish water species.... otherwise list is 18k
unique(.)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) %>%  # only keep where one of the relevant columns is -1 (present) - 2013 obs.
unique(.)
#fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species),] # There are some weird duplicates, not sure what's up there but prolly ok
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = spawner) %>%
group_by(SpecCode, Species) %>%
summarize(Coastal_Spawner = sum(coastal, na.rm = T),
Estuarine_Spawner = sum(estuarine, na.rm = T)) # That was a dumb way to do that but whatever
# Not including spawning area because multiple spawning areas results in multiple entries per species which is annoying
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4102 obs
fb.all.duplicates <- fb.all[duplicated(fb.all$Species),] # The duplicates....
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), any_vars(!is.na(.))) # 3791 possible species miiiiight use mangroves
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and
# causing problems with the numbers <10 so will convert that
# column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
ram.mang.sp <- unique(ram.fao.subset$scientificname)
# 197 potential mangrove-associated species in RAM based on geography
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# 42 species in the FishBase Subset are in RAM FAO Subset
# This means: these species are listed in FB as either occupying brackish water AND/OR matching one of the estuarine habitat characteristics, have assessments in the RAM database, and are located in FAO Regions that overlap with geographic mangrove extent
# How many stocks for those 42 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.inram$Species),] #70 stocks
# What about ones that just say they use mangroves?
fb.mangroves <- fb.all.subset[which(fb.all.subset$Mangroves == -1),] # 609 species in fishbase subset that have mangroves listed as habitat
fb.mang.inram <- fb.mangroves[which(fb.mangroves$Species %in% ram.fao.subset$scientificname),] # 7 species in RAM use mangroves
# How many stocks make up those 7 species?
fbram.mang.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.mang.inram$Species),] # 9 stocks
# downloads latest version (currently 4.44)
download_ramlegacy()
View(stock)
View(tac.data)
View(bioparams_notes_views)
load_ramlegacy()
View(timeseries)
View(timeseries_assessments_views)
View(tac.data)
View(survb.data)
View(f.data)
View(f.data)
View(f.data)
fbram.mang.stocks
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(fbram.mang.stocks$stockid)
fbram.mang.stocks
select(c("AUSSALMONNZ", "BTIPSHARATL")
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(c("AUSSALMONNZ", "BTIPSHARATL"))
mortality.stocks
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(fbram.mang.stocks$stockid)
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
filter(!fbram.mang.stocks %in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
select(fbram.mang.stocks$stockid)
mortality.stocks <- f.data %>%
filter(!fbram.mang.stocks %in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW"))
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(!fbram.mang.stocks %in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
select(fbram.mang.stocks$stockid)
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(-GLGROUPSATLCGM, -LHAIRTSOJECS, -MULLQNSW) %>%
select(fbram.mang.stocks$stockid)
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(-LHAIRTSOJECS, -MULLQNSW) %>% #(-GLGROUPSATLCGM, -LHAIRTSOJECS, -MULLQNSW
select(fbram.mang.stocks$stockid)
filter(fbram.mang.stocks !%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
filter(fbram.mang.stocks !%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(fbram.mang.stocks$stockid)
View(fbram.mang.stocks)
stocks.excluded <- fbram.mang.stocks %>%
filter(fbram.mang.stocks !%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
stocks.excluded <- fbram.mang.stocks %>%
filter(!%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW")) %>%
stocks.excluded <- fbram.mang.stocks %>%
filter(!%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW"))
stocks.excluded <- fbram.mang.stocks %>%
filter(fbram.mang.stocks !%in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW"))
stocks.excluded <- fbram.mang.stocks %>%
filter(!fbram.mang.stocks %in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW"))
fbram.mang.stocks
stocks.excluded <- fbram.mang.stocks %>%
filter(!stockid %in% c("GLGROUPSATLCGM", "LHAIRTSOJECS","MULLQNSW"))
stocks.excluded
# Filter RAM for the identified stocks of interest
mortality.stocks <- f.data %>%
select(stocks.excluded$stockid)
mortality.stocks
