<<<<<<< HEAD
library(rfishbase)
library(here)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater")
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
fb.all.subset <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater")
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
View(fb.ecosp)
fb.all.subset <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1 | Saltwater = -1)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1 | Saltwater == -1)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
fb.all.subset <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
ram_mangroves <- fb.all %>%
filter(Species %in% ram.sp) #281, including coastal spawners
ram_mangroves <- fb.all.subset %>%
filter(Species %in% ram.sp) #281, including coastal spawners
# Exclude the coastal spawners, only estuarine or NA spawners -
ram_nospawners <- fb.all %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround == "estuarine" | is.na(SpawningGround)) #52, excluding 'coastal' spawners
# Exclude the coastal spawners, only estuarine or NA spawners -
ram_nospawners <- fb.all.subset %>%
filter(Species %in% ram.sp) %>%
filter(SpawningGround == "estuarine" | is.na(SpawningGround)) #52, excluding 'coastal' spawners
# Save the mangrove-range FAO region number list
fao_mangrove_regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and for some reason causing problems with the numbers <10
# so will convert that column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located in the FAO regions that overlap with mangroves
ram_fao_subset <- numericstock %>%
filter(primary_FAOarea %in% fao_mangrove_regions) # 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
mang.sp <- unique(ram_fao_subset$scientificname) # 197 potential mangrove-associated species in RAM based on geography
# But how many of those might use mangroves based on the FishBase information?
ram_fao_fb_subset <- ram_fao_subset %>%
filter(scientificname %in% ram_mangroves$Species) #43
View(ram_mangroves)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) # only keep brackish water species.... otherwise list is 18k
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners, brackish only
?filter_at
# Many of the 'coastal spawners' don't have any otherwise relevant information - change here so that only have species that are either
# estuarine spawners, or have other habitat information
fb.all.subset <- fb.all %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0) | SpawningGround == "estuarine")
# Many of the 'coastal spawners' don't have any otherwise relevant information - change here so that only have species that are either
# estuarine spawners, or have other habitat information
fb.all.subset <- fb.all %>%
filter(vars(Estuaries:MarshesSwamps), any_vars(.!=0) | SpawningGround == "estuarine")
?which
?ifelse
?filter_if
# Many of the 'coastal spawners' don't have any otherwise relevant information - change here so that only have species that are either estuarine spawners, or have other habitat information
fb.all.subset <- fb.all %>%
filter(SpawningGround == "estuarine" | sum(Fresh:MarshesSwamps!=0))
View(fb.all.subset)
?remove_if
# Many of the 'coastal spawners' don't have any otherwise relevant information - change here so that only have species that are either estuarine spawners, or have other habitat information
fb.all.subset <- fb.all %>%
filter(SpawningGround == "estuarine" | sum(Fresh:MarshesSwamps!=0))
View(fb.ecosp)
# Many of the 'coastal spawners' don't have any otherwise relevant information - change here so that only have species that are either estuarine spawners, or have other habitat information
fb.all.subset <- fb.all %>%
filter(SpawningGround == "estuarine" | sum(Fresh:MarshesSwamps!=0))
View(fb.all.subset)
View(fb.spawning.subset)
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), is.na(all_vars(.)))
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), all_vars(is.na(.)))
View(fb.all.subset)
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), all_vars(!is.na(.)))
View(fb.all.subset)
library(tidyverse)
library(rfishbase)
library(here)
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve species table for all species
fb.species.table <- species()
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) # only keep brackish water species.... otherwise list is 18k
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround", "Spawningarea") %>%
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species")) #3793
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species")) #4489 - coastal and estuarine spawners, brackish only
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), all_vars(!is.na(.)))
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), any_vars(!is.na(.))) # 1572 possible species
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and for some reason causing problems with the numbers <10
# so will convert that column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
View(numericstock)
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# How many species make up those 368 stocks?
mang.sp <- unique(ram.fao.subset$scientificname) # 197 potential mangrove-associated species in RAM based on geography
ram.mangroves <- fb.all.subset %>%
filter(Species %in% ram.sp)
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
ram.mangroves <- fb.all.subset %>%
filter(Species %in% ram.sp)
View(ram.fao.subset)
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
ram.and.fb <- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
View(ram.and.fb)
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fbsubset.in.ramsubset<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# How many stocks for those 71 species?
fbram.stocks <- ram.fao.subset[which(scientificname %in% fbsubset.in.ramsubset$Species),]
# How many stocks for those 71 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fbsubset.in.ramsubset$Species),]
View(fbram.stocks)
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fbsubset.in.ramsubset<- fb.all.subset %>%
filter(Species %in% unique(ram.fao.subset$scientificname))
# How many stocks for those 71 species?
fbram.stocks <- ram.fao.subset$scientificname[which(ram.fao.subset$scientificname %in% fbsubset.in.ramsubset$Species),]
# How many stocks for those 71 species?
fbram.stocks <- ram.fao.subset$scientificname[which(ram.fao.subset$scientificname %in% fbsubset.in.ramsubset$Species)]
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
View(fb.inram)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) # only keep brackish water species.... otherwise list is 18k
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
=======
>>>>>>> 3782165cedd973249ff55c2a6437d9ecd6d47c17
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
View(fb.all.subset)
View(fb.all.subset)
View(fb.all)
# Retrieve ecology table for all species
fb.eco.table <- ecology() # Currently 34329 obs
# Retrieve species table for all species
fb.species.table <- species()
# Retrieve spawning table for all species
fb.spawning.table <- spawning()
# Notes about other tables:
# fb.repro.table <- reproduction() - no relevant habitat information
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) # only keep brackish water species.... otherwise list is 18k
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) # only keep where one of the relevant columns is -1 (present) - 2013 obs.
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) #coastal and estuarine spawners
# Not including spawning area because multiple spawning areas results in multiple entries per species which is annoying
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
View(fb.ecosp)
fb.all <- full_join(fb.ecosp, fb.spawning.subset)
View(fb.all)
View(fb.spawning.subset)
fb.spawning.subset[unique(fb.spawning.subset),]
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
filter(unique(.))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.)
View(fb.spawning.subset)
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
group_by(Species) %>%
# Not including spawning area because multiple spawning areas results in multiple entries per species which is annoying
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.)
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Coastal_Spawner = case_when(SpawningGround == "coastal" ~ -1,
SpawningGround == "estuarine" ~ NA,
SpawningGround == NA ~ NA))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Coastal_Spawner = case_when(SpawningGround == "coastal" ~ -1,
SpawningGround == "estuarine" ~ NA,
SpawningGround == "NA" ~ NA))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Coastal_Spawner = case_when(SpawningGround == "coastal" ~ -1,
SpawningGround == "estuarine" ~ "NA",
SpawningGround == "NA" ~ "NA"))
mutate(Coastal_Spawner = if_else(SpawningGround == "coastal", -1, NA)
fb.spawning.subset <- fb.spawning.table %>%
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Coastal_Spawner = if_else(SpawningGround == "coastal", -1, NA))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Coastal_Spawner = if_else(SpawningGround == "coastal", -1, "NA"))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate("Coastal_Spawner" = if_else(SpawningGround == "coastal", -1, "NA"))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate("Coastal_Spawner" = if_else(SpawningGround == "coastal", -1, NA))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate("Coastal_Spawner" = case_when(SpawningGround == "coastal" ~ -1,
SpawningGround == "estuarine" ~ 0))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate("Coastal_Spawner" = case_when(SpawningGround == "coastal" ~ -1,
SpawningGround == "estuarine" ~ 0),
"Estuarine_Spawner" = case_when(SpawningGround == "coastal" ~ 0,
SpawningGround == "estuarine" ~ -1))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Spawner = -1)
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(Spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = Spawner)
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = spawner) %>%
group_by(Species) %>%
summarize(Coastal_Spawner = sum(coastal, na.rm = T),
Estuarine_Spawner = sum(estuarine, na.rm = T))
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset)
View(fb.all)
length(unique(fb.all$Species))
fb.all.duplicates[duplicated(fb.all$Species)]
fb.all.duplicates <- fb.all[duplicated(fb.all$Species)]
fb.all.duplicates <- fb.all[duplicated(fb.all$Species),]
View(fb.all.duplicates)
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = spawner) %>%
group_by(SpecCode, Species) %>%
summarize(Coastal_Spawner = sum(coastal, na.rm = T),
Estuarine_Spawner = sum(estuarine, na.rm = T)) # That was a dumb way to do that but whatever
length(unique(fb.spawning.subset$Species))
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
length(unique(fb.all$Species))
length(unique(fb.eco.subset$Species))
fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species)]
fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species),]
View(fb.eco.dup)
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) %>%  # only keep where one of the relevant columns is -1 (present) - 2013 obs.
unique(.)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) %>% # only keep brackish water species.... otherwise list is 18k
unique(.)
length(unique(fb.sp.subset$Species))
length(unique(fb.eco.subset$Species))
length(unique(fb.spawning.subset$Species))
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0))
fb.eco.subset <- fb.eco.table %>%
select("SpecCode", "Species", "Estuaries", "Saltmarshes", "Mangroves", "MarshesSwamps", "AddRems") %>%
filter_at(vars(Estuaries:MarshesSwamps), any_vars(.!=0)) %>%  # only keep where one of the relevant columns is -1 (present) - 2013 obs.
unique(.)
View(fb.eco.subset)
fb.eco.dup <- fb.eco.subset[duplicated(.)]
fb.eco.dup <- fb.eco.subset[duplicated(.),]
fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset),]
fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species),]
View(fb.all.duplicates)
# Create subsets of tables to make easier to work with
fb.sp.subset <- fb.species.table %>%
select("SpecCode", "Species", "Fresh", "Brack", "Saltwater") %>%
filter(Brack == -1) %>% # only keep brackish water species.... otherwise list is 18k
unique(.)
fb.eco.dup <- fb.eco.subset[duplicated(fb.eco.subset$Species),] # There are some weird duplicates, not sure what's up there but prolly ok
fb.spawning.subset <- fb.spawning.table %>%
select("SpecCode", "Species", "SpawningGround") %>% # chose not to include spawning area
filter(SpawningGround %in% c("coastal", "estuarine")) %>%  #coastal and estuarine spawners
unique(.) %>%
mutate(spawner = -1) %>%
pivot_wider(names_from = SpawningGround, values_from = spawner) %>%
group_by(SpecCode, Species) %>%
summarize(Coastal_Spawner = sum(coastal, na.rm = T),
Estuarine_Spawner = sum(estuarine, na.rm = T)) # That was a dumb way to do that but whatever
# Join the subsets together:
fb.ecosp <- full_join(fb.sp.subset, fb.eco.subset, by = c("SpecCode","Species"))
fb.all <- full_join(fb.ecosp, fb.spawning.subset, by = c("SpecCode", "Species"))
fb.all.duplicates <- fb.all[duplicated(fb.all$Species),]
fb.all.subset <- fb.all %>%
filter_at(vars(Fresh:MarshesSwamps), any_vars(!is.na(.))) # 4085 possible species miiiiight use mangroves
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
# The species list can easily be retrieved from the stock or metadata tables:
# Save the species list as ram.sp
ram.sp <- unique(stock$scientificname) # 361 species in the RAM database
# Save the mangrove-range FAO region number list
fao.mangrove.regions <- c(1, 3, 4, 6, 31, 34, 41, 47, 51, 57, 61, 71, 77, 81, 87)
# The column that has the FAO area number is a character and
# causing problems with the numbers <10 so will convert that
# column to numeric to be able to compare to the list above
numericstock <- stock %>%
mutate(primary_FAOarea = as.numeric(primary_FAOarea))
# Filter the RAM stocks list for stocks that are located
# in the FAO regions that overlap with mangroves
ram.fao.subset <- numericstock %>%
filter(primary_FAOarea %in% fao.mangrove.regions)
# 368 potential mangrove-associated stocks in RAM based on geography
# How many species make up those 368 stocks?
ram.mang.sp <- unique(ram.fao.subset$scientificname)
# 197 potential mangrove-associated species in RAM based on geography
# Which of the species listed in the FishBase Subset are also in the RAM Subset?
fb.inram<- fb.all.subset %>%
filter(Species %in% ram.fao.subset$scientificname)
# How many stocks for those 42 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fbsubset.in.ramsubset$Species)]
# How many stocks for those 42 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.inram$Species)]
# How many stocks for those 42 species?
fbram.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.inram$Species),]
View(fbram.stocks)
length(unique(fbram.stocks$scientificname))
# What about ones that just say they use mangroves?
fb.mangroves <- fb.all.subset[which(Mangroves == -1),]
View(fb.all.subset)
# What about ones that just say they use mangroves?
fb.mangroves <- fb.all.subset[which(fb.all.subset$Mangroves == -1),]
View(fb.mangroves)
fb.mang.inram <- fb.mangroves[which(fb.mangroves$Species %in% ram.fao.subset$scientificname)]
fb.mang.inram <- fb.mangroves[which(fb.mangroves$Species %in% ram.fao.subset$scientificname),]
View(fb.mang.inram)
# How many stocks make up those 7 species?
fbram.mang.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.mang.inram$Species)]
# How many stocks make up those 7 species?
fbram.mang.stocks <- ram.fao.subset[which(ram.fao.subset$scientificname %in% fb.mang.inram$Species),]
View(fbram.mang.stocks)
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(ramlegacy) # caches RAM to make it easier to reference install_github("ropensci/ramlegacy")
library(ramlegacy)
install.packages(ramlegacy)
install.packages("ramlegacy")
# Load the RAM legacy database workspace v4.491:
load("DBdata[asmt][v4.491].RData")
View(biometrics)
View(timeseries)
View(tb.data)
View(biometrics)
View(bioparams)
View(divssb.data)
View(divssb.data)
View(divtb.mgt.data)
View(bioparams_assessments_views)
View(bioparams_values_views)
<<<<<<< HEAD
#Fishbase help
library(rfishbase)
library(tidyverse)
data <- read_csv("sp-rg-list.csv")
View(data)
data <- read_csv("sp-rg-list.csv") %>%
select(species)
data <- read_csv("sp-rg-list.csv") %>%
select(species)
View(data)
data <- read_csv("sp-rg-list.csv") %>%
select("scientific name")
View(data)
fb.sp.table <- species("data")
View(fb.sp.table)
fb.sp.table <- species(data)
list <- data$`scientific name`
fb.sp.table <- species(list)
View(fb.sp.table)
fb.sp.table <- species(list) %>%
select(Species, FBname, FamCode)
View(fb.sp.table)
taxa <- load..taxa(list)
taxa <- load.taxa(list)
taxa <- load_taxa(list)
View(taxa)
=======
rast_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell") %>%
rasterFromXYZ()
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
watson2000.2004_ind <- read_csv("CatchInd2000_2004.csv") # Watson 2000-2004 industrial catch numbers
cell_codes <- read_csv("Watson_CellCodes.csv") # lat long for the center of each cell and which cell number it refers to
rast_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell") %>%
rasterFromXYZ()
rast_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell")
plot(head(rast_2000_2004))
head(rast_2000_2004)
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv("Watson_CellCodes.csv") # lat long for the center of each cell and which cell number it refers to
cell_codes <- read_csv("Watson_CellCodes.csv") # lat long for the center of each cell and which cell number it refers to
cell_codes <- read_csv("path/Watson_CellCodes.csv") # lat long for the center of each cell and which cell number it refers to
cell_codes <- read_csv(path/"Watson_CellCodes.csv") # lat long for the center of each cell and which cell number it refers to
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
path
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
path
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "GoogleDrive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/GoogleDrive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/GoogleDrive/My Drive/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1GpvrcGzmRSROKwiSRhlx3wUH3WCLFULw/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data")
cell_codes <- read_csv(paste0(path,"/Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
cell_codes
watson2000.2004_ind <- read_csv(paste0(path,"CatchInd2000_2004.csv")) # Watson 2000-2004 industrial catch numbers
watson2000.2004_ind <- read_csv(paste0(path,"CatchInd2000_2004.csv")) # Watson 2000-2004 industrial catch numbers
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data/")
watson2000.2004_ind <- read_csv(paste0(path,"CatchInd2000_2004.csv")) # Watson 2000-2004 industrial catch numbers
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
head(rast_2000_2004)
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1GpvrcGzmRSROKwiSRhlx3wUH3WCLFULw/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data/")
knitr::opts_chunk$set(echo = TRUE)
library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
watson2000.2004_ind <- read_csv(paste0(path,"CatchInd2000_2004.csv")) # Watson 2000-2004 industrial catch numbers
cell_codes <- read_csv(paste0(path,"Watson_CellCodes.csv")) # lat long for the center of each cell and which cell number it refers to
rast_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell")
# %>%
# rasterFromXYZ()
head(rast_2000_2004)
# Join the spatial information with the cell codes for each location
joined_ind_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell")
head(joined_ind_2000_2004)
truncated <- head(joined_ind_2000_2004)
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,6:7])
truncated <- head(joined_ind_2000_2004)
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,6:7])
truncated
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,"LonCentre":"LatCentre"])
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,LonCentre:LatCentre])
truncated <- head(joined_ind_2000_2004)
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,LonCentre:LatCentre])
# set up an 'empty' raster with the extent of the spatial data
r <- extent(truncated[,6:7])
# set up an 'empty' raster with the extent of the spatial data
r <- raster()
# set up an 'empty' raster
r <- raster()
?rasterize
# Rasterize the point data from the joined timeseries data
raster_ind_2000_2004 <- rasterize(joined_ind_2000_2004, r)
# Extract the coordinates from the truncated data
coordinates <- ~truncated$LonCentre+truncated$LatCentre
# Rasterize the point data from the joined timeseries data
raster_ind_2000_2004 <- rasterize(coordinates, r)
str(truncated)
# Extract the coordinates from the truncated data
coordinates(truncated) <- ~LonCentre+LatCentre
class(truncated)
plot(truncated)
# Rasterize the point data from the joined timeseries data
raster_ind_2000_2004 <- rasterize(truncated, r)
plot(raster_ind_2000_2004)
# Assign the dataframe to be a spatial object by telling it the lat and long column names
coordinates(joined_ind_2000_2004) <- ~LonCentre+LatCentre
# Set up an 'empty' raster
r <- raster()
# Rasterize the point data from the joined timeseries data onto the empty raster (empty raster has a global extent)
raster_ind_2000_2004 <- rasterize(coordinates, r)
# Join the spatial information with the cell codes for each location
joined_ind_2000_2004 <- full_join(head(watson2000.2004_ind), cell_codes, by = "Cell")
# Assign the dataframe to be a spatial object by telling it the lat and long column names
coordinates(joined_ind_2000_2004) <- ~LonCentre+LatCentre
class(joined_ind_2000_2004)
# Rasterize the point data from the joined timeseries data onto the empty raster (empty raster has a global extent)
raster_ind_2000_2004 <- rasterize(joined_ind_2000_2004, r)
names(joined_ind_2000_2004)
knitr::opts_chunk$set(echo = TRUE)
#library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
#library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
watson2000.2004_ind <- read_csv("CatchInd2000_2004.csv")
knitr::opts_chunk$set(echo = TRUE)
#library(freeR) # where Chris Free's `fishbase` function lives
library(tidyverse)
#library(rfishbase)
library(here)
library(sf) # Stores information about the CRS and classes of the spatial data
library(raster) # Package that deals with raster algebra
library(rgdal) # Defining CRS
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1GpvrcGzmRSROKwiSRhlx3wUH3WCLFULw/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data/")
watson2000.2004_ind <- read_csv("CatchInd2000_2004.csv")
# Create a Root to Extract Files
if(Sys.info()["sysname"] == "Windows"){ #If operating system is "Windows" use G: Drive
team_path <- "G:/"
} else { # If it is not (i.e. Mac), use the Google Drive File Stream
team_path <- "/Volumes/GoogleDrive/.shortcut-targets-by-id/1GpvrcGzmRSROKwiSRhlx3wUH3WCLFULw/"
}
#Create the Full File Path
path <- paste0(team_path, "fishery-habitat-project/Data/Raw_Data/")
watson2000.2004_ind <- read_csv(paste0(team_path, "CatchInd2000_2004.csv"))
>>>>>>> 3782165cedd973249ff55c2a6437d9ecd6d47c17
